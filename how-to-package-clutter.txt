====== Intro ======

This documents how to build Clutter and Cogl and them make a Windows
installer containing the binaries and all of the dependencies using
WiX. WiX is an open source package from Microsoft for generating MSI
files. These instructions assume you are cross compiling Clutter/Cogl
from a Linux installation and running WiX with Wine.

====== Basic setup ======

Make sure you have Wine and the MinGW compiler installed. On Fedora
these can be installed with:

 sudo yum install mingw32-gcc wine

Make a directory which we will use as the root for everything:

 CLUTTER_MSI_ROOT=$HOME/clutter-msi
 mkdir -p "$CLUTTER_MSI_ROOT"
 cd "$CLUTTER_MSI_ROOT"

Set this as the Wine prefix so we can also install WiX there.

 export WINEPREFIX="$CLUTTER_MSI_ROOT"

====== Installing Mono ======

To run WiX we also need mono, so let's install that now:

MONO_DIR="http://ftp.novell.com/pub/mono/archive/2.10/windows-installer/5/"
MONO_INSTALLER="mono-2.10-gtksharp-2.12.10-win32-5.exe"
wget "$MONO_DIR/$MONO_INSTALLER"
wine "$MONO_INSTALLER"

Choose to just install mono, no need for mono-gtk, accept license,
etc. When running the installer Wine complained about requiring Gecko
but it seems to work to just hit cancel and ignore the complaint.

====== Installing WiX ======

Now install WiX:

wget -O Wix35.msi "http://download.codeplex.com/Project/Download/\
FileDownload.aspx?ProjectName=wix&DownloadId=204417&\
FileTime=129409234222130000&Build=17950"

msiexec /i Wix35.msi

WiX tries to use a library called msi.dll. Wine has a wrapper for this
but it doesn't seem to work with WiX. However it's possible to use a
copy from a native installation of Windows instead. To get this to
work, copy the file from a Windows machine and tell Wine not to use
the override like so:

cp msi.dll $CLUTTER_MSI_ROOT/drive_c/windows/system32/msi.dll
export WINEDLLOVERRIDES="msi=n"

====== Installing lib.exe ======

To compile Clutter applications with Visual Studio we need import
libraries for the DLLs. We can't generate these with MinGW but
Microsoft has a lib.exe tool to generate these from a .def file which
MinGW will generate. This is available for free with Visual Studio
Express or the Windows SDK. However, I couldn't get either of these to
install via Wine so instead I just installed them on a Windows machine
and copied the files over. Once it is copied you can use wine regedit
to edit the PATH environment variable to include the following:

c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin;
c:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE

====== Getting the dependencies ======

Now we want to compile Clutter and Cogl. We want separate prefixes for
the dependencies, Cogl and Clutter itself so that we can easily split
them into separate features in the MSI. The dependencies will go in
$CLUTTER_MSI_ROOT/clutter-cross. It's best to delete these directories
before starting a fresh build so we can be sure the MSI will only
contain the minimum files.

There is a script for Clutter to fetch binaries of all of its
dependencies. Let's use that:

CLUTTER_GIT="http://git.gnome.org/browse/clutter/plain"
FETCH_SCRIPT="/build/mingw/mingw-fetch-dependencies.sh"
wget "$CLUTTER_GIT/$FETCH_SCRIPT"
bash `basename "$FETCH_SCRIPT"`

Just press enter to accept the default directories.

We don't need any of the packaging scripts from the dependencies so we
can just delete them:

rm -vrf clutter-cross/src

====== Compiling Cogl ======

Now we'll get the sources for Cogl:

COGL_DIR="http://source.clutter-project.org/sources/cogl/1.7/"
COGL_TAR="cogl-1.7.4.tar.bz2"
wget "$COGL_DIR/$COGL_TAR"
tar -jvxf "$COGL_TAR"
cd `echo $COGL_TAR | sed 's/\.tar.*//'`

Version 1.7.4 of Cogl has some bugs which means that it won't work on
Windows. Let's patch it to fix this. Note, this shouldn't be needed
with later versions.

COGL_GIT_PATCH="http://git.gnome.org/browse/cogl/patch/?id="
for COMMIT in d259a87602516 f7bdc92d6c397; do
 ( wget -q -O - \
      "${COGL_GIT_PATCH}${COMMIT}" \
      | patch -f -p1 );
done
wget -q -O - \
  "http://bugzilla-attachments.gnome.org/attachment.cgi?id=192883" \
  | patch -p1

Ok, now we'll compile it:

./configure --host="i686-pc-mingw32" \
            --target="i686-pc-mingw32" \
            --disable-glx \
            --enable-wgl \
            --prefix="$CLUTTER_MSI_ROOT/cogl-install" \
            CFLAGS="-O2 -mms-bitfields" \
            PKG_CONFIG="$CLUTTER_MSI_ROOT/build/run-pkg-config.sh"
make all install

====== Compiling Clutter ======

Next we'll compile Clutter:

cd "$CLUTTER_MSI_ROOT"
CLUTTER_DIR="http://source.clutter-project.org/sources/clutter/1.7/"
CLUTTER_TAR="clutter-1.7.6.tar.bz2"
wget "$CLUTTER_DIR/$CLUTTER_TAR"
tar -jvxf "$CLUTTER_TAR"
cd `echo $CLUTTER_TAR | sed 's/\.tar.*//'`

Clutter 1.7.6 has a bug so that it won't build on Windows. Let's patch
this too:

CLUTTER_GIT_PATCH="http://git.gnome.org/browse/clutter/patch/?id="
wget -q -O - \
     "${CLUTTER_GIT_PATCH}91ace65cae" \
     | patch -p1

./configure --host="i686-pc-mingw32" \
            --target="i686-pc-mingw32" \
            --with-flavour=win32 \
            --prefix="$CLUTTER_MSI_ROOT/clutter-install" \
            CFLAGS="-O2 -mms-bitfields" \
            PKG_CONFIG="$CLUTTER_MSI_ROOT/build/run-pkg-config.sh" \
            PKG_CONFIG_PATH="$CLUTTER_MSI_ROOT/cogl-install/lib/pkgconfig"
make all install

====== Making the import libraries ======

We can now make the .lib import libraries to make Clutter easier to
use with Visual Studio:

cd "$CLUTTER_MSI_ROOT"
wine lib /machine:i386 \
     /def:clutter-1.7.6/clutter/.libs/libclutter-win32-1.0-0.dll.def \
     /out:clutter-win32-1.0.lib \
     /name:libclutter-win32-1.0-0.dll
cp clutter-win32-1.0.lib clutter-install/lib/
wine lib /machine:i386 \
     /def:cogl-1.7.4/cogl/.libs/libcogl-2.dll.def \
     /out:cogl.lib \
     /name:libcogl-2.dll
cp cogl.lib cogl-install/lib/
wine lib /machine:i386 \
     /def:cogl-1.7.4/cogl-pango/.libs/libcogl-pango-0.dll.def \
     /out:cogl-pango.lib \
     /name:libcogl-pango-0.dll
cp cogl-pango.lib cogl-install/lib/
wine lib /machine:i386 \
     /def:build/json-glib-0.12.2/json-glib/.libs/libjson-glib-1.0-0.dll.def \
     /out:json-glib-1.0.lib \
     /name:libjson-glib-1.0-0.dll
cp json-glib-1.0.lib clutter-cross/lib/

====== Build the MSI file ======

Now that we have the directory structure created, we can use the
included scripts to generate a .wxs file:

$PATH_TO_THE_SCRIPT/generate-msi.pl \
  --packageversion="1.7.6.1" \
  "Clutter dependencies:clutter-cross" \
  "Cogl:cogl-install" \
  "Clutter:clutter-install" \
  > clutter.wxs

Now we can use WiX to generate the MSI:

wine c:/Program\ Files\ \(x86\)/Windows\ Installer\ XML\ v3.5/bin/candle.exe \
     clutter.wxs
wine c:/Program\ Files\ \(x86\)/Windows\ Installer\ XML\ v3.5/bin/light.exe \
     clutter.wixobj

You should now have a working clutter.msi generated.
